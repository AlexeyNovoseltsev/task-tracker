import React, { useEffect, useState } from 'react';
import { useApiHealth, useProjects } from '@/hooks/useApi';
import { api } from '@/lib/api';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, XCircle, Loader2, Server, Database, Wifi } from 'lucide-react';
import { useToast } from '@/hooks/useToast';

export default function ApiTestPage() {
  const [connectionStatus, setConnectionStatus] = useState<'checking' | 'connected' | 'disconnected'>('checking');
  const [dbTestData, setDbTestData] = useState<any>(null);
  const [dbTestLoading, setDbTestLoading] = useState(false);
  const [dbTestError, setDbTestError] = useState<string | null>(null);
  const { data: healthData, loading: healthLoading, error: healthError, checkHealth } = useApiHealth();
  const { data: projectsData, loading: projectsLoading, error: projectsError, fetchProjects } = useProjects();
  const { success, error, warning, info } = useToast();

  useEffect(() => {
    testConnection();
  }, []);

  const testConnection = async () => {
    setConnectionStatus('checking');
    try {
      await checkHealth();
      setConnectionStatus('connected');
    } catch (error) {
      setConnectionStatus('disconnected');
    }
  };

  const testProjects = async () => {
    try {
      await fetchProjects();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
    }
  };

  const testCreateProject = async () => {
    try {
      const newProject = {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
        description: '–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API',
        key: 'TEST',
        color: '#3B82F6'
      };
      
      const result = await api.createProject(newProject);
      console.log('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', result);
      await fetchProjects(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
    }
  };

  const testDatabaseConnection = async () => {
    setDbTestLoading(true);
    setDbTestError(null);
    setDbTestData(null);
    
    try {
      const result = await api.testDatabase();
      setDbTestData(result);
      success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!", 4000);
    } catch (error) {
      setDbTestError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", 5000);
    } finally {
      setDbTestLoading(false);
    }
  };

  const testNotifications = () => {
    success("–£—Å–ø–µ—Ö!", "–≠—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ", 3000);
    
    setTimeout(() => {
      info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ", 4000);
    }, 1000);
    
    setTimeout(() => {
      warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –≤–∞–∂–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏", 5000);
    }, 2000);
    
    setTimeout(() => {
      error("–û—à–∏–±–∫–∞", "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ", 4000);
    }, 3000);
  };

  const getStatusIcon = (status: typeof connectionStatus) => {
    switch (status) {
      case 'checking':
        return <Loader2 className="h-5 w-5 animate-spin text-blue-500" />;
      case 'connected':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'disconnected':
        return <XCircle className="h-5 w-5 text-red-500" />;
    }
  };

  const getStatusText = (status: typeof connectionStatus) => {
    switch (status) {
      case 'checking':
        return '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
      case 'connected':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case 'disconnected':
        return '–û—Ç–∫–ª—é—á–µ–Ω–æ';
    }
  };

  const getStatusColor = (status: typeof connectionStatus) => {
    switch (status) {
      case 'checking':
        return 'secondary';
      case 'connected':
        return 'default';
      case 'disconnected':
        return 'destructive';
    }
  };

  return (
    <div className="container mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">üß™ –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h1>
        <p className="text-muted-foreground">
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É frontend –∏ backend API
        </p>
      </div>

      <div className="grid gap-6">
        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Server className="h-5 w-5" />
              –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
            </CardTitle>
            <CardDescription>
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ localhost:3001
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                {getStatusIcon(connectionStatus)}
                <span className="font-medium">{getStatusText(connectionStatus)}</span>
                <Badge variant={getStatusColor(connectionStatus)}>
                  {connectionStatus === 'connected' ? 'API –¥–æ—Å—Ç—É–ø–µ–Ω' : 
                   connectionStatus === 'disconnected' ? 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' : '–ü—Ä–æ–≤–µ—Ä–∫–∞...'}
                </Badge>
              </div>
              <Button onClick={testConnection} disabled={healthLoading}>
                {healthLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Wifi className="h-4 w-4 mr-2" />}
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
              </Button>
            </div>

            {healthData && (
              <div className="bg-green-50 dark:bg-green-950 p-4 rounded-lg">
                <h4 className="font-medium text-green-800 dark:text-green-200 mb-2">‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:</h4>
                <pre className="text-sm text-green-700 dark:text-green-300">
                  {JSON.stringify(healthData, null, 2)}
                </pre>
              </div>
            )}

            {healthError && (
              <div className="bg-red-50 dark:bg-red-950 p-4 rounded-lg">
                <h4 className="font-medium text-red-800 dark:text-red-200 mb-2">‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h4>
                <p className="text-sm text-red-700 dark:text-red-300">{healthError}</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Database className="h-5 w-5" />
              –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
            </CardTitle>
            <CardDescription>
              –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-2 mb-4">
              <Button onClick={testDatabaseConnection} disabled={dbTestLoading}>
                {dbTestLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Database className="h-4 w-4 mr-2" />}
                –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
              </Button>
            </div>

            {dbTestData && (
              <div className="bg-green-50 dark:bg-green-950 p-4 rounded-lg mb-4">
                <h4 className="font-medium text-green-800 dark:text-green-200 mb-2">
                  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ë–î: {dbTestData.summary}
                </h4>
                <div className="space-y-2">
                  {dbTestData.tests?.map((test: any, index: number) => (
                    <div key={index} className="flex items-center justify-between text-sm">
                      <span>{test.name}:</span>
                      <div className="flex items-center gap-2">
                        <Badge variant={test.success ? 'default' : 'destructive'}>
                          {test.success ? '‚úì' : '‚úó'}
                        </Badge>
                        {test.count !== undefined && <span>({test.count} –∑–∞–ø–∏—Å–µ–π)</span>}
                      </div>
                    </div>
                  ))}
                </div>
                <details className="mt-3">
                  <summary className="cursor-pointer text-sm font-medium">–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç</summary>
                  <pre className="text-xs text-green-700 dark:text-green-300 mt-2 overflow-auto">
                    {JSON.stringify(dbTestData, null, 2)}
                  </pre>
                </details>
              </div>
            )}

            {dbTestError && (
              <div className="bg-red-50 dark:bg-red-950 p-4 rounded-lg mb-4">
                <h4 className="font-medium text-red-800 dark:text-red-200 mb-2">‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:</h4>
                <p className="text-sm text-red-700 dark:text-red-300">{dbTestError}</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ß–µ—Ä–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Database className="h-5 w-5" />
              –¢–µ—Å—Ç API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            </CardTitle>
            <CardDescription>
              –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ API
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-2 mb-4">
              <Button onClick={testProjects} disabled={projectsLoading}>
                {projectsLoading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
                –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
              </Button>
              <Button onClick={testCreateProject} variant="outline">
                –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
              </Button>
            </div>

            {projectsData && (
              <div className="bg-blue-50 dark:bg-blue-950 p-4 rounded-lg">
                <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
                  üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projectsData.length}
                </h4>
                {projectsData.length > 0 ? (
                  <pre className="text-sm text-blue-700 dark:text-blue-300 overflow-auto">
                    {JSON.stringify(projectsData, null, 2)}
                  </pre>
                ) : (
                  <p className="text-sm text-blue-700 dark:text-blue-300">
                    –ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
                  </p>
                )}
              </div>
            )}

            {projectsError && (
              <div className="bg-red-50 dark:bg-red-950 p-4 rounded-lg">
                <h4 className="font-medium text-red-800 dark:text-red-200 mb-2">‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</h4>
                <p className="text-sm text-red-700 dark:text-red-300">{projectsError}</p>
                <div className="mt-2 p-2 bg-yellow-100 dark:bg-yellow-900 rounded text-xs">
                  <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –û—à–∏–±–∫–∞ HTTP 401 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. 
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç "–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" –≤—ã—à–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5" />
              –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            </CardTitle>
            <CardDescription>
              –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–∞—Å—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-3 mb-4">
              <Button onClick={testNotifications} className="gap-2">
                <CheckCircle className="h-4 w-4" />
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </Button>
              <Button onClick={() => success("–£—Å–ø–µ—Ö!", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ", 3000)} variant="outline" className="gap-2">
                –£—Å–ø–µ—Ö
              </Button>
              <Button onClick={() => info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", 3000)} variant="outline" className="gap-2">
                –ò–Ω—Ñ–æ
              </Button>
              <Button onClick={() => warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", 3000)} variant="outline" className="gap-2">
                –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
              </Button>
              <Button onClick={() => error("–û—à–∏–±–∫–∞", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ", 3000)} variant="outline" className="gap-2">
                –û—à–∏–±–∫–∞
              </Button>
            </div>
            <div className="bg-blue-50 dark:bg-blue-950 p-4 rounded-lg">
              <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
                ‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
              </h4>
              <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                <li>‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞</li>
                <li>‚Ä¢ –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω —Å blur —ç—Ñ—Ñ–µ–∫—Ç–æ–º</li>
                <li>‚Ä¢ –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è</li>
                <li>‚Ä¢ –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</li>
                <li>‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É</li>
                <li>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã</li>
              </ul>
            </div>
          </CardContent>
        </Card>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <Card>
          <CardHeader>
            <CardTitle>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <h4 className="font-medium mb-2">üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:</h4>
                <ol className="text-sm text-muted-foreground space-y-1 ml-4 list-decimal">
                  <li>–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code className="bg-gray-100 dark:bg-gray-800 px-1 rounded">.env</code> –≤ –ø–∞–ø–∫–µ <code className="bg-gray-100 dark:bg-gray-800 px-1 rounded">task-flow-api</code></li>
                  <li>–ü–æ–ª—É—á–∏—Ç–µ Supabase URL –∏ –∫–ª—é—á–∏ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Supabase</li>
                  <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ <code className="bg-gray-100 dark:bg-gray-800 px-1 rounded">env.example</code> –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏</li>
                  <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä: <code className="bg-gray-100 dark:bg-gray-800 px-1 rounded">npm run dev</code></li>
                </ol>
              </div>
              
              <div>
                <h4 className="font-medium mb-2">üö® –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:</h4>
                <ul className="text-sm text-muted-foreground space-y-1 ml-4">
                  <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (npm run dev –≤ task-flow-api)</li>
                  <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001</li>
                  <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ</li>
                </ul>
              </div>
              
              <div>
                <h4 className="font-medium mb-2">üóÑÔ∏è –ï—Å–ª–∏ —Ç–µ—Å—Ç –ë–î –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h4>
                <ul className="text-sm text-muted-foreground space-y-1 ml-4">
                  <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_KEY –≤ .env</li>
                  <li>‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã –ë–î: <code className="bg-gray-100 dark:bg-gray-800 px-1 rounded">schema.sql</code></li>
                  <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç Supabase –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω</li>
                </ul>
              </div>
              
              <div>
                <h4 className="font-medium mb-2">üîê –û—à–∏–±–∫–∞ HTTP 401 (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è):</h4>
                <ul className="text-sm text-muted-foreground space-y-1 ml-4">
                  <li>‚Ä¢ –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"</li>
                  <li>‚Ä¢ –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</li>
                  <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ Supabase</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}